using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using ACMEstudentPortal.Models;
using System.Web.ModelBinding;
using System.Data.Entity.Infrastructure;
using System.Data.Entity;
using System.IO;
using System.Data;
using System.Data.SqlClient;
using System.Configuration;
using iTextSharp.text;
using iTextSharp.text.html.simpleparser;
using iTextSharp.text.pdf;
using Newtonsoft.Json;
using System.Text;

namespace ACMEstudentPortal
{
    public partial class StudentList : System.Web.UI.Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {
           
        }

        public override void VerifyRenderingInServerForm(Control control)
        {
           
            //required to avoid the runtime error "  
            //Control 'sutdentsGrid' of type 'GridView' must be placed inside a form tag with runat=server."  
        }


        public IQueryable<Student> getStudents([Control] Gender?
    gender)
        {
            StudentContext db = new StudentContext();
            IQueryable<Student> query = db.students;

            if (gender != null)
            {
                query = query.Where(s => s.sex == gender);
            }

            return query;
        }

        public void updateStudent(int studentID)
        {
            using (StudentContext db = new StudentContext())
            {
                Student item = null;
                item = db.students.Find(studentID);
                if (item == null)
                {
                    ModelState.AddModelError("",
                      String.Format("Item with id {0} was not found", studentID));
                    return;
                }

                TryUpdateModel(item);
                if (ModelState.IsValid)
                {
                    db.SaveChanges();
                }
            }
        }

        public void deleteStudent(int studentID)
        {
            using (StudentContext db = new StudentContext())
            {
                var item = new Student { studentID = studentID };

                db.Entry(item).State = System.Data.Entity.EntityState.Deleted;
                try
                {
                    db.SaveChanges();
                }
                catch (DbUpdateConcurrencyException)
                {
                    ModelState.AddModelError("",
                      String.Format("Item with id {0} no longer exists in the database.", studentID));
                }
            }
        }

        protected void ExportToJSON(object sender, EventArgs e)
        {

            DataTable dt = GetDataTable(studentsGrid);

            StringBuilder sb = new StringBuilder();
            sb.Append(DataTabletoJSON(dt));
         

            string text = sb.ToString();

            Response.Clear();
            Response.ClearHeaders();

            Response.AddHeader("Content-Length", text.Length.ToString());
            Response.ContentType = "text/plain";
            Response.AppendHeader("content-disposition", "attachment;filename=\"JSON.txt\"");

            Response.Write(text);
            Response.End();
        

        }

     public   DataTable GetDataTable(GridView dtg)
        {
            DataTable dt = new DataTable();

            // add the columns to the datatable            
            if (dtg.HeaderRow != null)
            {

                for (int i = 0; i < dtg.HeaderRow.Cells.Count; i++)
                {
                    dt.Columns.Add(dtg.HeaderRow.Cells[i].Text);
                }
            }

            //  add each of the data rows to the table
            foreach (GridViewRow row in dtg.Rows)
            {
                DataRow dr;
                dr = dt.NewRow();

                for (int i = 0; i < row.Cells.Count; i++)
                {
                    dr[i] = row.Cells[i].Text.Replace(" ", "");
                }
                dt.Rows.Add(dr);
            }
            return dt;
        }

        public string DataTabletoJSON(DataTable table)
        {
            string JSONString = string.Empty;
            JSONString = JsonConvert.SerializeObject(table);
            return JSONString;
        }

        protected void ExportToPDF(object sender, EventArgs e)
        {
            using (StringWriter sw = new StringWriter())
            {
                using (HtmlTextWriter hw = new HtmlTextWriter(sw))
                {
                    //To Export all pages
                    studentsGrid.AllowSorting = false;
                    studentsGrid.AllowPaging = false;
                    studentsGrid.AutoGenerateEditButton = false;
                    studentsGrid.AutoGenerateDeleteButton = false;
                    studentsGrid.DataBind();

                    studentsGrid.RenderControl(hw);
                    StringReader sr = new StringReader(sw.ToString());
                    Document pdfDoc = new Document(PageSize.A2, 10f, 10f, 10f, 0f);
                    HTMLWorker htmlparser = new HTMLWorker(pdfDoc);
                    PdfWriter.GetInstance(pdfDoc, Response.OutputStream);
                    pdfDoc.Open();
                    htmlparser.Parse(sr);
                    pdfDoc.Close();

                    Response.ContentType = "application/pdf";
                    Response.AddHeader("content-disposition", "attachment;filename=StudentsList.pdf");
                    Response.Cache.SetCacheability(HttpCacheability.NoCache);
                    Response.Write(pdfDoc);
                    Response.End();
                }
            }
        }
    }
}